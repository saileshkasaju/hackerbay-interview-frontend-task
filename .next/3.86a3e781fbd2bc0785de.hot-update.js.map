{"version":3,"sources":["webpack:///./components/Game.js?cc82"],"names":["Game","props","finishGame","gameState","movePiece","cellId","hasFoundEnemy","gameStatus","state","matrix","width","height","h","row","w","push","flatMatrix","_","flatten","totalEnemies","Math","ceil","activeCells","sampleSize","inactiveCells","filter","eachCell","indexOf","startPosiition","floor","random","length","totalSteps","gameScore","map","ri","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;IAEMA,I;;;AACJ,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA,4GACXA,KADW;;AAAA,UA0BnBC,UA1BmB,GA0BN,UAACC,SAAD,EAAe;AAC1B;AACA;AACD,KA7BkB;;AAAA,UA+BnBC,SA/BmB,GA+BP,gBAA+B;AAAA,UAA5BC,MAA4B,QAA5BA,MAA4B;AAAA,UAApBC,aAAoB,QAApBA,aAAoB;AAAA,UACnCC,UADmC,GACrB,MAAKC,KADgB,CACnCD,UADmC;AAE1C,KAjCkB;;AAEjB,UAAKE,MAAL,GAAc,EAAd;AAFiB,QAGTC,KAHS,GAGST,KAHT,CAGTS,KAHS;AAAA,QAGFC,MAHE,GAGSV,KAHT,CAGFU,MAHE;;AAIjB,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,MAApB,EAA4BC,GAA5B,EAAiC;AAC/B,UAAIC,MAAM,EAAV;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,KAApB,EAA2BI,GAA3B,EAAgC;AAC9BD,YAAIE,IAAJ,CAAYH,CAAZ,SAAiBE,CAAjB;AACD;AACD,YAAKL,MAAL,CAAYM,IAAZ,CAAiBF,GAAjB;AACD;AACD,QAAMG,aAAa,8CAAAC,CAAEC,OAAF,CAAU,MAAKT,MAAf,CAAnB;AACA,QAAMU,eAAeC,KAAKC,IAAL,CAAYX,QAAQC,MAAT,IAAoBD,QAAQC,MAA5B,CAAD,GAAuC,CAAjD,CAArB;AACA,UAAKW,WAAL,GAAmB,8CAAAL,CAAEM,UAAF,CAAaP,UAAb,EAAyBG,YAAzB,CAAnB;AACA,UAAKK,aAAL,GAAqBR,WAAWS,MAAX,CAAkB,UAACC,QAAD;AAAA,aAAc,MAAKJ,WAAL,CAAiBK,OAAjB,CAAyBD,QAAzB,MAAuC,CAAC,CAAtD;AAAA,KAAlB,CAArB;AACA,QAAME,iBAAiB,MAAKJ,aAAL,CAAmBJ,KAAKS,KAAL,CAAWT,KAAKU,MAAL,KAAc,MAAKN,aAAL,CAAmBO,MAA5C,CAAnB,CAAvB;AACA,UAAKvB,KAAL,GAAa;AACXD,kBAAY,OADD;AAEXyB,kBAAY,CAFD;AAGXC,iBAAW,CAHA;AAIXd;AAJW,KAAb;AAhBiB;AAsBlB;;;;2CACsB;AACrB,WAAKjB,UAAL;AACD;;;6BASQ;AAAA,UACCC,SADD,GACe,KAAKK,KADpB,CACCL,SADD;;AAAA,gCAEM,KAAKF,KAFX;;AAGP,aACE;AAAA;AAAA,UAAK,WAAU,MAAf;AAAA;AAAA;AAAA;AAAA;AACG,aAAKQ,MAAL,CAAYyB,GAAZ,CAAgB,UAACrB,GAAD,EAAMsB,EAAN;AAAA,iBACf;AAAC,eAAD;AAAA,cAAK,cAAYA,EAAjB;AAAA;AAAA;AAAA;AAAA;AACGtB,gBAAIqB,GAAJ,CAAQ,UAAC7B,MAAD;AAAA,qBACP,4DAAC,IAAD;AACE,+BAAaA,MADf,EACyB,IAAIA,MAD7B;AAAA;AAAA;AAAA;AAAA;AAAA,gBADO;AAAA,aAAR;AADH,WADe;AAAA,SAAhB;AADH,OADF;AAaD;;;;;;;;;EAnDgB,6CAAA+B,CAAMC,S;;eAsDVrC,I;;;AAAf;;;;;;;;;;;;0BAtDMA,I","file":"3.86a3e781fbd2bc0785de.hot-update.js","sourcesContent":["import _ from 'lodash';\n// import Row from './Row';\n// import Cell from './Cell';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.matrix = [];\n    const { width, height } = props;\n    for (let h = 0; h < height; h++) {\n      let row = [];\n      for (let w = 0; w < width; w++) {\n        row.push(`${h}-${w}`);\n      }\n      this.matrix.push(row);\n    }\n    const flatMatrix = _.flatten(this.matrix);\n    const totalEnemies = Math.ceil(((width * height) / (width + height))* 2);\n    this.activeCells = _.sampleSize(flatMatrix, totalEnemies);\n    this.inactiveCells = flatMatrix.filter((eachCell) => this.activeCells.indexOf(eachCell) === -1);\n    const startPosiition = this.inactiveCells[Math.floor(Math.random()*this.inactiveCells.length)]\n    this.state = {\n      gameStatus: 'ready',\n      totalSteps: 0,\n      gameScore: 0,\n      totalEnemies,\n    }\n  }\n  componentWillUnmount() {\n    this.finishGame();\n  }\n  finishGame = (gameState) => {\n    // the game is over\n    // so set score and cleanup\n  }\n\n  movePiece = ({ cellId, hasFoundEnemy }) => {\n    let { gameStatus} = this.state;\n  }\n  render() {\n    const { gameState } = this.state;\n    const {  } = this.props;\n    return (\n      <div className=\"grid\">\n        {this.matrix.map((row, ri) => (\n          <Row key={`row-${ri}`}>\n            {row.map((cellId) => (\n              <Cell\n                key={`cell-${cellId}`} id={cellId}\n              />\n            ))}\n          </Row>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Game;\n\n\n\n// WEBPACK FOOTER //\n// ./components/Game.js"],"sourceRoot":""}