{"version":3,"sources":["webpack:///./components/Game.js?cc82"],"names":["Game","props","finishGame","gameState","movePiece","cellId","hasFoundEnemy","gameStatus","state","matrix","width","height","h","row","w","push","flatMatrix","_","flatten","totalEnemies","Math","ceil","activeCells","sampleSize","inactiveCells","filter","eachCell","indexOf","startPosition","floor","random","length","totalSteps","gameScore","body","document","querySelector","onkeydown","e","metaKey","preventDefault","split","x","y","console","log","keyCode","setState","Number","map","ri","React","Component"],"mappings":"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","file":"3.6d13aed75d644e780f29.hot-update.js","sourcesContent":["import _ from 'lodash';\nimport Row from './Row';\nimport Cell from './Cell';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.matrix = [];\n    const { width, height } = props;\n    for (let h = 0; h < height; h++) {\n      let row = [];\n      for (let w = 0; w < width; w++) {\n        row.push(`${h}-${w}`);\n      }\n      this.matrix.push(row);\n    }\n    const flatMatrix = _.flatten(this.matrix);\n    const totalEnemies = Math.ceil(((width * height) / (width + height))* 2);\n    this.activeCells = _.sampleSize(flatMatrix, totalEnemies);\n    const inactiveCells = flatMatrix.filter((eachCell) => this.activeCells.indexOf(eachCell) === -1);\n    const startPosition = inactiveCells[Math.floor(Math.random() * inactiveCells.length)];\n    this.state = {\n      gameStatus: 'ready',\n      totalSteps: 0,\n      gameScore: 0,\n      totalEnemies,\n      startPosition\n    }\n  }\n  componentDidMount() {\n    this.body = document.querySelector('body');\n    this.body.onkeydown = (e) => {\n      if (!e.metaKey) {\n        e.preventDefault();\n      }\n      const { startPosition } = this.state;\n      const [x, y] = startPosition.split('-');\n      console.log(e.keyCode, startPosition, ' key code');\n      switch (e.keyCode) {\n        case 38:\n          // move character up\n          this.setState({ startPosition: `${(Number(x) - 1)}-${y}`});\n          break;\n        case 40:\n          // move character down\n          this.setState({ startPosition: `${(Number(x) + 1)}-${y}`});\n          break;\n        case 37:\n          // move character left\n          this.setState({ startPosition: `${x}-${Number(y) - 1}`});\n          break;\n        case 39:\n          // move character right\n          this.setState({ startPosition: `${x}-${Number(y) + 1}`});\n          break;\n        default:\n          break;\n      }\n    };\n  }\n  componentWillUnmount() {\n    this.finishGame();\n  }\n  finishGame = (gameState) => {\n    // the game is over\n    // so set score and cleanup\n  };\n\n  movePiece = ({ cellId, hasFoundEnemy }) => {\n    let { gameStatus} = this.state;\n  };\n  render() {\n    const { gameState } = this.state;\n    const {  } = this.props;\n    return (\n      <div className=\"grid\">\n        {this.matrix.map((row, ri) => (\n          <Row key={`row-${ri}`}>\n            {row.map((cellId) => (\n              <Cell\n                key={`cell-${cellId}`} id={cellId}\n                movePiece={this.movePiece} activeCells={this.activeCells}\n                {...this.state}\n              />\n            ))}\n          </Row>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Game;\n\n\n\n// WEBPACK FOOTER //\n// ./components/Game.js"],"sourceRoot":""}