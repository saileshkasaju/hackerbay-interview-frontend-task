{"version":3,"sources":["webpack:///./components/Game.js?cc82"],"names":["Game","props","finishGame","gameState","movePiece","cellId","hasFoundEnemy","gameStatus","state","matrix","width","height","h","row","w","push","flatMatrix","_","flatten","totalEnemies","Math","ceil","activeCells","sampleSize","inactiveCells","filter","eachCell","indexOf","startPosition","floor","random","length","totalSteps","gameScore","body","document","querySelector","onkeydown","e","metaKey","preventDefault","console","log","keyCode","map","ri","React","Component"],"mappings":"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","file":"3.2815574dd886a65e1333.hot-update.js","sourcesContent":["import _ from 'lodash';\nimport Row from './Row';\nimport Cell from './Cell';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.matrix = [];\n    const { width, height } = props;\n    for (let h = 0; h < height; h++) {\n      let row = [];\n      for (let w = 0; w < width; w++) {\n        row.push(`${h}-${w}`);\n      }\n      this.matrix.push(row);\n    }\n    const flatMatrix = _.flatten(this.matrix);\n    const totalEnemies = Math.ceil(((width * height) / (width + height))* 2);\n    this.activeCells = _.sampleSize(flatMatrix, totalEnemies);\n    const inactiveCells = flatMatrix.filter((eachCell) => this.activeCells.indexOf(eachCell) === -1);\n    const startPosition = inactiveCells[Math.floor(Math.random() * inactiveCells.length)];\n    this.state = {\n      gameStatus: 'ready',\n      totalSteps: 0,\n      gameScore: 0,\n      totalEnemies,\n      startPosition\n    }\n  }\n  componentDidMount() {\n    this.body = document.querySelector('body');\n    this.body.onkeydown = function (e) {\n      if (!e.metaKey) {\n        e.preventDefault();\n      }\n      console.log(e.keyCode, ' key code');\n    }\n  }\n  componentWillUnmount() {\n    this.finishGame();\n  }\n  finishGame = (gameState) => {\n    // the game is over\n    // so set score and cleanup\n  };\n\n  movePiece = ({ cellId, hasFoundEnemy }) => {\n    let { gameStatus} = this.state;\n  };\n  render() {\n    const { gameState } = this.state;\n    const {  } = this.props;\n    return (\n      <div className=\"grid\">\n        {this.matrix.map((row, ri) => (\n          <Row key={`row-${ri}`}>\n            {row.map((cellId) => (\n              <Cell\n                key={`cell-${cellId}`} id={cellId}\n                movePiece={this.movePiece} activeCells={this.activeCells}\n                {...this.state}\n              />\n            ))}\n          </Row>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Game;\n\n\n\n// WEBPACK FOOTER //\n// ./components/Game.js"],"sourceRoot":""}